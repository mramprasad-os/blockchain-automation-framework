##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.metadata.nodeName }}
  namespace: {{ .Values.metadata.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.metadata.nodeName }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.metadata.nodeName }}
      app.kubernetes.io/name: {{ .Values.metadata.nodeName }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.metadata.nodeName }}
        app.kubernetes.io/name: {{ .Values.metadata.nodeName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      imagePullSecrets:
      - name: {{ .Values.image.imagePullSecret }}
      serviceAccountName: {{ .Values.vault.serviceAccountName }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        - name: init-certificates
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: IfNotPresent
          env:
           - name: VAULT_ADDR
             value: {{ $.Values.vault.address }}
           - name: KUBERNETES_AUTH_PATH
             value: {{ $.Values.vault.authPath }}
           - name: VAULT_APP_ROLE
             value: {{ $.Values.vault.role }}
           - name: BASE_DIR
             value: {{ $.Values.config.volume.baseDir }}
           - name: CERTS_SECRET_PREFIX
             value: {{ .Values.vault.certsecretprefix }}
           - name: IDMAN_NODENAME
             value: {{ $.Values.cenmServices.idmanName }}
           - name: MOUNT_PATH
             value: "/DATA"       
          command: ["sh", "-c"]
          args:
          - |-
               #!/usr/bin/env sh
                validateVaultResponse () {
                  if echo ${2} | grep "errors"; then
                    echo "ERROR: unable to retrieve ${1}: ${2}"
                    exit 1
                  fi
                  if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
                  then
                    http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                    --header "X-Vault-Token: ${VAULT_TOKEN}" \
                    ${VAULT_ADDR}/v1/${1})
                    curl_response=$?
                    if test "$http_code" != "200" ; then
                        echo "Http response code from Vault - $http_code and curl_response - $curl_response"
                        if test "$curl_response" != "0"; then
                          echo "Error: curl command failed with error code - $curl_response"
                          exit 1
                        fi
                    fi
                  fi
                }

               # setting up env to get secrets from vault
               echo "Getting secrets from Vault Server"
               KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
               VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
               validateVaultResponse 'vault login token' "${VAULT_TOKEN}"

               mkdir -p ${MOUNT_PATH}/trust-stores;
               mkdir -p ${MOUNT_PATH}/key-stores;

               # ssl trust-stores from vault
               LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/root/certs | jq -r 'if .errors then . else . end')
               validateVaultResponse "${CERTS_SECRET_PREFIX}/root/certs" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
               corda_ssl_trust_store=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["corda-ssl-trust-store.jks"]')
               echo "${corda_ssl_trust_store}" | base64 -d > ${MOUNT_PATH}/trust-stores/corda-ssl-trust-store.jks
               echo "Successfully got SSL trust store certifcates"

               # idman ssl key-stores from vault
               LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/${IDMAN_NODENAME}/certs | jq -r 'if .errors then . else . end')
               validateVaultResponse "${CERTS_SECRET_PREFIX}/${IDMAN_NODENAME}/certs" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
               idm_ssl=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["corda-ssl-identity-manager-keys.jks"]')
               echo "${idm_ssl}" | base64 -d > ${MOUNT_PATH}/key-stores/corda-ssl-identity-manager-keys.jks
               echo "Successfully got SSL Idman certifcates"
               echo "Done"
          volumeMounts:
          - name: pki-certs-keys
            mountPath: /DATA
      containers:
        - name: main
          securityContext:
            {{- toYaml .Values.config.securityContext | nindent 12 }}
          image: {{ .Values.image.zoneContainerName }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
          - |-
            cp CM-FILES/run.sh bin/run.sh
            bash bin/run.sh
          volumeMounts:
          - name: pki-certs-keys
            mountPath: /opt/cenm/DATA
          - name: zone-conf
            mountPath: /opt/cenm/CM-FILES/run.sh
            subPath: run.sh
          - name: zone-logs
            mountPath: /opt/cenm/logs
          - name: zone-h2
            mountPath: /opt/cenm/h2
          resources:
            {{- toYaml .Values.config.pod.resources | nindent 12 }}
        {{- if .Values.config.logsContainersEnabled }}
        - name: logs-zone
          securityContext:
            {{- toYaml .Values.config.securityContext | nindent 12 }}
          image: {{ .Values.image.zoneContainerName }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
          - |-
            cd /opt/cenm/
            while true; do tail -f logs/zone-service/*.log 2>/dev/null ; sleep 5; done
            # in case sth went wrong just wait indefinitely ...
            tail -f /dev/null
          volumeMounts:
          - name: zone-logs
            mountPath: /opt/cenm/logs
          resources:
            {{- toYaml .Values.config.pod.resources | nindent 12 }}
        {{- end  }}
      volumes:
        - name: zone-conf
          configMap:
            name: {{ .Values.metadata.prefix }}-zone-conf
        - name: zone-h2
          persistentVolumeClaim:
            claimName: {{ .Values.metadata.prefix }}-zone-h2
        - name: pki-certs-keys
          persistentVolumeClaim:
            claimName: {{ .Values.metadata.prefix }}-pki-certs-keys
        - name: zone-logs
          persistentVolumeClaim:
            claimName: {{ .Values.metadata.prefix }}-zone-logs
      {{- with .Values.config.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.config.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.config.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
